SET SERVEROUTPUT ON;
-- TRIGGER IN PLSQL.
-- CREATE A BACK UP TABLE THAT WILL STORE DATA BEFORE EXECUTING ANY DML ON THE TABLE.
CREATE TABLE BAK_EMP (CMD_EXECD VARCHAR2(10), EXEC_TIME SYSTIMESTAMP);

SELECT * FROM BAK_EMP;

-- CREATE TRIGGER THAT WOULD HELP IN TAKING BACK UP OF EACH RECORD IN BAK_EMP TABLE WHILE EXECUTING ANY DML COMMAND.
CREATE OR REPLACE TRIGGER NM
BEFORE INSERT OR UPDATE OR DELETE ON EMPLOYEES
FOR EACH ROW
DISABLE
DECLARE
L_TRANS VARCHAR2(10);
BEGIN
L_TRANS := CASE
WHEN INSERTING THEN 'INSERT'
WHEN UPDATING THEN 'UPDATE'
WHEN DELETING THEN 'DELETE'
END;
INSERT INTO BAK_EMP (CMD_EXECD, EXEC_TIME) VALUES (L_TRANS,SYSTIMESTAMP);
END;
/

INSERT INTO EMPLOYEES (EMPLOYEE_ID,LAST_NAME,EMAIL,HIRE_DATE,JOB_ID)
VALUES (500,'KAUSAR','S.KAUSAR22','08032023','IT_PROG');
COMMIT;
ROLLBACK;

SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID = 500;
DELETE FROM EMPLOYEES WHERE EMPLOYEE_ID = 500;
COMMIT;

UPDATE EMPLOYEES
SET SALARY = 7000
WHERE EMPLOYEE_ID = 500;

SELECT * FROM BAK_EMP;

DELETE BAK_EMP
WHERE CMD_EXECD = 'UPDATE';

COMMIT;

--USING REFERENCING COLUMNS IN TRIGGER.
CREATE OR REPLACE TRIGGER EMP_UPD
BEFORE UPDATE ON EMPLOYEES
FOR EACH ROW
DISABLE
WHEN (NEW.SALARY >= 7000)
DECLARE
BEGIN
DBMS_OUTPUT.PUT_LINE('EMPLOYEES TABLE IS UPDATED SUCCESSFULLY FROM: ' || :OLD.SALARY);
END;
/

-- COMPOUND TRIGGER TO AVOID MUTATING TABLE ERROR THAT COMES WHEN SAME TABLE IS USED IN DML ON WHICH TRIGGER EVENT SET.

CREATE TABLE TRANS_COPY (CMD_EXEC VARCHAR2(10),EXEC_TIME TIMESTAMP,OLD_SAL NUMBER,NEW_SAL NUMBER);

CREATE OR REPLACE TRIGGER TIGER_TRIGGER
FOR DELETE ON EMPLOYEES
COMPOUND TRIGGER
TYPE REC_TYPE IS TABLE OF EMPLOYEES%ROWTYPE;
REC REC_TYPE;
BEFORE STATEMENT IS 
BEGIN
SELECT * BULK COLLECT INTO REC FROM EMPLOYEES WHERE ROWNUM <=5;
END BEFORE STATEMENT;
AFTER EACH ROW IS
BEGIN
INSERT INTO TRANS_COPY (CMD_EXEC,EXEC_TIME,OLD_SAL,NEW_SAL)
VALUES('DELETE',SYSTIMESTAMP,0,0);
END AFTER EACH ROW;
END;
/

SELECT * FROM TRANS_COPY;
DELETE FROM TRANS_COPY;
